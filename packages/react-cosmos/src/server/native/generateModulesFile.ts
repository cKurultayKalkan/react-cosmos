import path from 'path';
import { writeFile } from 'fs';
import promisify from 'util.promisify';
import { findUserModulePaths } from 'react-cosmos-shared2/server';
import { CosmosConfig, getRootDir } from './../shared/config';
import { slash } from '../shared/slash';

const writeFileAsync = promisify(writeFile);

const TEMPLATE = `// This file is automatically generated by Cosmos. Best ignore it.

// Global imports used to be added as bundle entry points but they were moved
// here to make them hot reload-able, which works because the file that imports
// this file knows how to accept hot reload patches
/* __INJECT_GLOBAL_IMPORTS__ */

export const options = {
  port: __COSMOS_PORT
};

export function getUserModules() {
  return {
    fixtures: __COSMOS_FIXTURES,
    decorators: __COSMOS_DECORATORS
  }
};
`;

export async function generateModulesFile(cosmosConfig: CosmosConfig) {
  const { modulesPath } = cosmosConfig;
  const modules = await generateModuleImports(cosmosConfig);
  await writeFileAsync(modulesPath, modules, 'utf8');

  const relModulesPath = path.relative(process.cwd(), modulesPath);
  console.log(`[Cosmos] Generated ${relModulesPath}`);
}

async function generateModuleImports(cosmosConfig: CosmosConfig) {
  const { fixturesDir, fixtureFileSuffix, globalImports, port } = cosmosConfig;
  const rootDir = getRootDir(cosmosConfig);

  // TODO: Extract reusable part between this and embedModulesWebpackLoader
  const { fixturePaths, decoratorPaths } = await findUserModulePaths({
    rootDir,
    fixturesDir,
    fixtureFileSuffix
  });

  return (
    TEMPLATE.replace(
      `/* __INJECT_GLOBAL_IMPORTS__ */`,
      globalImports.map(importPath => `require('${importPath}');`).join(`\n`)
    )
      // TODO: Resolve global imports
      .replace(
        ': __COSMOS_FIXTURES',
        `: ${genModuleMapStr(fixturePaths, rootDir)}`
      )
      .replace(
        ': __COSMOS_DECORATORS',
        `: ${genModuleMapStr(decoratorPaths, rootDir)}`
      )
      .replace(': __COSMOS_PORT', `: ${port}`)
  );
}

function genModuleMapStr(paths: string[], rootDir: string) {
  if (paths.length === 0) {
    return '{}';
  }

  return `{${paths.map(p => getModuleStr(p, rootDir)).join(', ')}\n}`;
}

function getModuleStr(p: string, rootDir: string) {
  const relPath = slash(path.relative(rootDir, p));
  return `
  '${relPath}': require('${p}').default`;
}
