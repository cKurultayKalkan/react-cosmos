import path from 'path';
import { writeFile } from 'fs';
import promisify from 'util.promisify';
import { watch, FSWatcher } from 'chokidar';
import { debounce } from 'lodash';
import { CosmosConfig, DevServerPluginArgs } from '../shared';
import {
  FILE_PATH_IGNORE,
  FIXTURE_PATTERNS,
  DECORATOR_PATTERNS,
  StringifiedUserDeps,
  getStringifiedUserDeps
} from '../shared/userDeps';

const writeFileAsync = promisify(writeFile);

export async function userDepsFile({ cosmosConfig }: DevServerPluginArgs) {
  await generateUserDepsFile(cosmosConfig);
  const watcher = await startFixtureFileWatcher(cosmosConfig);
  return () => {
    watcher.close();
  };
}

const FILE_PATTERNS = [...FIXTURE_PATTERNS, ...DECORATOR_PATTERNS];
const DEBOUNCE_INTERVAL = 50;

async function startFixtureFileWatcher(
  cosmosConfig: CosmosConfig
): Promise<FSWatcher> {
  return new Promise(resolve => {
    const watcher: FSWatcher = watch(FILE_PATTERNS, {
      ignored: FILE_PATH_IGNORE,
      ignoreInitial: true,
      cwd: cosmosConfig.rootDir
    })
      .on('ready', () => resolve(watcher))
      .on(
        'all',
        debounce(() => generateUserDepsFile(cosmosConfig), DEBOUNCE_INTERVAL)
      );
  });
}

type NativeRendererConfig = {
  port: number;
};

async function generateUserDepsFile(cosmosConfig: CosmosConfig) {
  const { userDepsPath, port } = cosmosConfig;

  const rendererConfig: NativeRendererConfig = { port };
  const compiledModulesDeps = await getStringifiedUserDeps(
    cosmosConfig,
    rendererConfig
  );

  const fileContents = getCompiledTemplate(compiledModulesDeps);
  await writeFileAsync(userDepsPath, fileContents, 'utf8');

  const relUserDepsPath = path.relative(process.cwd(), userDepsPath);
  console.log(`[Cosmos] Generated ${relUserDepsPath}`);
}

function getCompiledTemplate({
  globalImports,
  rendererConfig,
  fixtures,
  decorators
}: StringifiedUserDeps) {
  return `// This file is automatically generated by Cosmos.
${globalImports}
module.exports = {
  rendererConfig: ${rendererConfig},
  fixtures: ${fixtures},
  decorators: ${decorators}
};`;
}
